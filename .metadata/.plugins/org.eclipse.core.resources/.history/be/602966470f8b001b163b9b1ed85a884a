package 카카오2020경주로건설;

import java.util.PriorityQueue;

public class Solution {
	private int[] dr = {-1, 0, 1, 0};
	private int[] dc = {0, 1, 0, -1};
	private int N;
	public int solution(int[][] board) {
		N = board.length;
		return djik(board);
	}
	public int djik(int[][] board) {
		int[][][] dist = new int[N][N][4];
		PriorityQueue<int[]> que = new PriorityQueue<>((a, b)->Integer.compare(a[2], b[2]));
		if(board[0][1] == 0) que.offer(new int[] {0,1,100,1});
		if(board[1][0] == 0) que.offer(new int[] {1,0,100,2});
		
		for(int i = 0; i<N; i++) {
			for(int j = 0; j<N; j++) {
				for(int k = 0; k<4; k++) {
					if(i ==0 && j ==0) continue;
					dist[i][j][k] = Integer.MAX_VALUE;
				}
			}
		}//정점 거리 최대값으로 초기화
		
		while(!que.isEmpty()) {
			int[] p = que.poll();
			int r = p[0], c = p[1]; 
			int cost = p[2];
			int dir = p[3];
			if(dist[r][c][dir] >= cost) {
				for(int d = 0; d<4; d++) {
					int nr = r+ dr[d];
					int nc = c+ dc[d];
					if(nr >= 0 && nr < N && nc >=0 && nc < N && board[nr][nc] != 1) {
						int pCost = 0;
						if(dir == d) {
							pCost = 100;
						}else {
							pCost = 600;
						}
						if(dist[nr][nc][d] > pCost + cost) {
							dist[nr][nc][d] = pCost + cost;
							que.offer(new int[] {nr, nc, dist[nr][nc][d], d});
						}
					}
				}
			}
		}
		int answer = Integer.MAX_VALUE;
		for(int k = 0; k < 4; k++)
	        answer = Math.min(answer, dist[N-1][N-1][k]);
		return answer;
	}
	public static void main(String[] args) {
		Solution s = new Solution();
		
		int[][] board = {{0,0,1,0},{0,0,0,0},{0,1,0,1},{1,0,0,0}};
		int[][] board2 = {
		        {0, 0, 0, 0, 0},
		        {0, 1, 1, 1, 0},
		        {0, 0, 1, 0, 0},
		        {1, 0, 0, 0, 1},
		        {0, 1, 1, 0, 0}
		    };
		System.out.println(s.solution(board));

	}

}
