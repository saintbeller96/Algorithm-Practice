import java.util.Scanner;

public class Solution {

	static int[][] visit;
	static int[][] data;
	static int[] dr = { -1, 1, 0, 0 };
	static int[] dc = { 0, 0, -1, 1 };
	static int N;
	static int T;

	public static void main(String[] args) {

		Scanner scann = new Scanner(System.in);
		T = scann.nextInt();
		for (int t = 1; t <= T; t++) {
			N = scann.nextInt();
			data = new int[N][N];
			visit = new int[N][N];// 방문여부
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					data[i][j] = scann.nextInt();
				}
			}
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (visit[i][j] == 0) {
						dfs(i, j);
					}
				}
			}
		}
	}

	private static void dfs(int cr, int cc) {
		visit[cr][cc] = 1;
		for (int d = 0; d < 4; d++) {
			int nr = cr + dr[d];
			int nc = cc + dc[d];
			if (!check(nr, nc)) {
				continue;
			}
			if (data[cr][cc] + 1 == data[nr][nc]) {
				if (visit[nr][nc] == 0) {
					dfs(nr, nc); // 갈수있는 만큼 1 2 3
					for (int i = 0; i < N; i++) {
						for (int j = 0; j < N; j++) {
							System.out.print(visit[i][j] + " ");							
						}
						System.out.println();
					}
					System.out.println("----------");
				}
				// 3 2 1
				System.out.println(visit[cr][cc] + " " + visit[nr][nc]);
				visit[cr][cc] = Math.max(visit[cr][cc], visit[nr][nc] + 1);
			}
		}
	}

	private static boolean check(int nr, int nc) {
		if (nr >= 0 && nr < N && nc >= 0 && nc < N) {
			return true;
		} else
			return false;
	}
}